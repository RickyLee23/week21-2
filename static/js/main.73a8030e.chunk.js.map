{"version":3,"sources":["hw2/board.js","reportWebVitals.js","index.js"],"names":["BoardWrapper","styled","div","ContentBox","Container","Box","BoxKey","GotWinner","winOrNot","newBoard","x","y","DirectionX","DirectionY","now","counter","App","React","useState","Array","fill","board","setBoard","blackIsNext","setBlackIsNext","winner","setWinner","circles","push","onClick","e","JSON","parse","stringify","newValue","target","classList","add","updateBoard","squares","i","window","location","reload","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gvDAEA,IAAMA,EAAeC,IAAOC,IAAV,KACZC,EAAaF,IAAOC,IAAV,KAYVE,EAAYH,IAAOC,IAAV,KAUTG,EAAMJ,IAAOC,IAAV,KAMHI,EAASL,IAAOC,IAAV,KA6BNK,EAAYN,IAAOC,IAAV,KAef,SAASM,EAASC,EAAUC,EAAGC,EAAGC,EAAYC,GAG5C,IAFA,IAAIC,EAAML,EAASE,GAAGD,GAClBK,EAAU,IACX,CAGD,GAFAL,GAAQE,EAEJE,IAAQL,EADZE,GAAQE,GACgBH,GAGtB,MAFAK,IAKJ,OAAOA,EAiEMC,MA9Df,WAQE,IARc,IAAD,EACaC,IAAMC,SAC9BC,MAAM,IAAIC,KAAKD,MAAM,IAAIC,KAAK,QAFnB,mBACNC,EADM,KACCC,EADD,OAIyBL,IAAMC,UAAS,GAJxC,mBAINK,EAJM,KAIOC,EAJP,OAKeP,IAAMC,SAAS,IAL9B,mBAKNO,EALM,KAKEC,EALF,KAOTC,EAAU,GAPD,WAQJjB,GACP,IATW,eASFC,GACPgB,EAAQC,KACN,cAACtB,EAAD,CAAQuB,QAAS,SAACC,GAAD,OAKvB,SAAqBA,EAAGpB,EAAGC,EAAGY,GAC5B,IAAMd,EAAWsB,KAAKC,MAAMD,KAAKE,UAAUZ,IAE3C,GAAuB,OAAnBZ,EAASE,GAAGD,GAAa,CAE3Bc,GAAgBD,GAChB,IAAIW,GAA2B,IAAhBX,EAAuB,QAAU,QAChDO,EAAEK,OAAOC,UAAUC,IAAIH,GACvBzB,EAASE,GAAGD,GAAKwB,EACjBZ,EAASb,IAGPD,EAASC,EAAUC,EAAGC,EAAG,EAAG,GAAKH,EAASC,EAAUC,EAAGC,GAAI,EAAG,IAAM,GACpEH,EAASC,EAAUC,EAAGC,EAAG,EAAG,GAAKH,EAASC,EAAUC,EAAGC,EAAG,GAAI,IAAM,GACpEH,EAASC,EAAUC,EAAGC,EAAG,GAAI,GAAKH,EAASC,EAAUC,EAAGC,GAAI,EAAG,IAC7D,GACFH,EAASC,EAAUC,EAAGC,EAAG,EAAG,GAAKH,EAASC,EAAUC,EAAGC,GAAI,GAAI,IAAM,KAE9C,UAAnBF,EAASE,GAAGD,GACdgB,EAAU,gBAEVA,EAAU,kBA1BYY,CAAYR,EAAGpB,EAAGC,EAAGY,QAFxCZ,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,IADFD,EAAI,EAAGA,EAAI,GAAIA,IAAM,EAArBA,GAoCT,IADA,IAAI6B,EAAU,GACLC,EAAI,EAAGA,EAAI,IAAKA,IACvBD,EAAQX,KAAK,cAACvB,EAAD,KAGf,OACE,eAACL,EAAD,WACGyB,GACC,eAAClB,EAAD,gCACWkB,EADX,eAEE,wBAAQI,QAAS,kBAAMY,OAAOC,SAASC,UAAvC,yCAGJ,cAACxC,EAAD,UAAaoC,IACb,cAACnC,EAAD,UAAYuB,QCvIHiB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.73a8030e.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport React from \"react\";\nconst BoardWrapper = styled.div``;\nconst ContentBox = styled.div`\n  box-sizing: border-box;\n  position: absolute;\n  top: 200px;\n  left: 200px;\n  width: 900px;\n  height: 900px;\n  box-shadow: 10px 10px 10px gray;\n  display: flex;\n  flex-wrap: wrap;\n  background: wheat;\n`;\nconst Container = styled.div`\n  box-sizing: border-box;\n  width: 950px;\n  height: 950px;\n  position: absolute;\n  top: 175px;\n  left: 175px;\n  display: flex;\n  flex-wrap: wrap;\n`;\nconst Box = styled.div`\n  box-sizing: border-box;\n  width: 50px;\n  height: 50px;\n  border: 1px solid #121212;\n`;\nconst BoxKey = styled.div`\n  box-sizing: border-box;\n  width: 50px;\n  height: 50px;\n  border-radius: 25px;\n  border: none;\n  cursor: pointer;\n\n  &.black {\n    background: radial-gradient(\n      circle at 35% 25%,\n      #999 0%,\n      #000 90%,\n      #666 95%,\n      #999 100%\n    );\n  }\n  &.white {\n    background: radial-gradient(\n      circle at 35% 25%,\n      white 0%,\n      #eee 30%,\n      #ccc 60%,\n      #bbb 80%,\n      #aaa 95%,\n      #999 100%\n    );\n  }\n`;\nconst GotWinner = styled.div`\n  position: fixed;\n  z-index: 999;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(0, 0, 0, 0.5);\n  color: white;\n  font-size: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nfunction winOrNot(newBoard, x, y, DirectionX, DirectionY) {\n  let now = newBoard[y][x];\n  let counter = 0;\n  do {\n    x = x + DirectionX;\n    y = y + DirectionY;\n    if (now === newBoard[y][x]) {\n      counter++;\n    } else {\n      break;\n    }\n  } while (true);\n  return counter;\n}\n\nfunction App() {\n  const [board, setBoard] = React.useState(\n    Array(19).fill(Array(19).fill(null))\n  );\n  const [blackIsNext, setBlackIsNext] = React.useState(true);\n  const [winner, setWinner] = React.useState(\"\");\n\n  let circles = []; //每一個下棋的位置\n  for (let x = 0; x < 19; x++) {\n    for (let y = 0; y < 19; y++) {\n      circles.push(\n        <BoxKey onClick={(e) => updateBoard(e, x, y, blackIsNext)}></BoxKey>\n      );\n    }\n  }\n\n  function updateBoard(e, x, y, blackIsNext) {\n    const newBoard = JSON.parse(JSON.stringify(board));\n\n    if (newBoard[y][x] === null) {\n      //如果是沒下過的位置，才能下\n      setBlackIsNext(!blackIsNext);\n      let newValue = blackIsNext === true ? \"black\" : \"white\"; //如果接下來是黑棋，就把 'black' 賦值給 newValue\n      e.target.classList.add(newValue); //直接改變選取到的 BoxKey 顏色，newValue 加在 class\n      newBoard[y][x] = newValue;\n      setBoard(newBoard);\n\n      if (\n        winOrNot(newBoard, x, y, 1, 0) + winOrNot(newBoard, x, y, -1, 0) >= 4 ||\n        winOrNot(newBoard, x, y, 0, 1) + winOrNot(newBoard, x, y, 0, -1) >= 4 ||\n        winOrNot(newBoard, x, y, 1, -1) + winOrNot(newBoard, x, y, -1, 1) >=\n          4 ||\n        winOrNot(newBoard, x, y, 1, 1) + winOrNot(newBoard, x, y, -1, -1) >= 4\n      ) {\n        if (newBoard[y][x] === \"black\") {\n          setWinner(\"黑子\");\n        } else {\n          setWinner(\"白子\");\n        }\n      }\n    }\n  }\n\n  let squares = []; //每一方格的外觀\n  for (let i = 0; i < 324; i++) {\n    squares.push(<Box />);\n  }\n\n  return (\n    <BoardWrapper>\n      {winner && (\n        <GotWinner>\n          沒錯......{winner}贏了\n          <button onClick={() => window.location.reload()}>再玩一次</button>\n        </GotWinner>\n      )}\n      <ContentBox>{squares}</ContentBox>\n      <Container>{circles}</Container>\n    </BoardWrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./hw2/board.js\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}